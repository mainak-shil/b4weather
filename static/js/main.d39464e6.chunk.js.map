{"version":3,"sources":["network/service.js","assets/clear_sky.jpg","assets/few_clouds.jpg","assets/haze.jpg","assets/scattered_clouds.jpg","assets/shower_rain.jpeg","utils/Helper.js","assets/default.webp","utils/constants.js","components/DashboardMainCard.js","components/FutureForecast.js","components/FutureForecastListItem.js","components/Header.js","screens/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["AxiosHelper","url","method","headers","console","group","params","log","JSON","stringify","axios","then","response","groupEnd","catch","err","bgImgArr","name","img","haze","clear_sky","few_clouds","scattered_clouds","shower_rain","defaultLocObj","country","lat","lng","WEATHERBIT_BASE_URL","WEATHERBIT_HEADER","DashboardMainCard","currentWeatherData","className","style","backgroundColor","Col","xs","md","Image","src","weather","icon","fluid","height","width","alt","color","fontSize","fontWeight","marginTop","parseInt","main","temp","description","sys","moment","unix","dt","format","Card","Row","Title","sunrise","sunset","precip","wind","speed","toFixed","clouds","all","FutureForecast","_onSelectTabFutureForecast","tabDataArr","Tab","Container","id","defaultActiveKey","onSelect","sm","Nav","variant","Item","Link","eventKey","Content","length","map","ele","ind","data","FutureForecastListItem","Header","as","ts","Body","wind_spd","_onChangeKeyword","_handleSearch","_handleCurrentLocSearch","searchedCityArr","fetchCurrentLocData","padding","alignItems","justifyContent","type","placeholder","aria-label","onChange","onClick","index","Dashboard","citiesWithLatLong","useMemo","CITY_DATA","lastSavedLoc","parse","localStorage","getItem","useState","keyword","setKeyword","setSearchedCityArr","setCurrentWeatherData","selectedTab","setSelectedTab","bgImage","setBgImage","hourForecastArr","setHourForecastArr","weekForecastArr","setWeekForecastArr","useEffect","fetHourlyData","fetchWeekData","selectedCity","payload","lon","appid","units","searchParams","URLSearchParams","toString","filterBgImgArr","filter","str","toLowerCase","indexOf","String","a","hours","background","e","target","value","preventDefault","filteredCities","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","city","setItem","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d39464e6.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst AxiosHelper = (url, method, headers = null) => {\n    console.group(\"AxiosHelper\");\n    const params = {\n        method: method,\n        url,\n        headers: headers,\n    };\n    console.log(JSON.stringify(params));\n\n    return axios(params)\n        .then((response) => {\n            console.log(\"response:\", JSON.stringify(response));\n            console.groupEnd();\n            return response;\n        })\n        .catch((err) => {\n            console.log(\"axios error\", err.response);\n        });\n};\n\nexport { AxiosHelper };\n","export default __webpack_public_path__ + \"static/media/clear_sky.d1bc3fa1.jpg\";","export default __webpack_public_path__ + \"static/media/few_clouds.e46c8333.jpg\";","export default __webpack_public_path__ + \"static/media/haze.fcb1565a.jpg\";","export default __webpack_public_path__ + \"static/media/scattered_clouds.f43e0917.jpg\";","export default __webpack_public_path__ + \"static/media/shower_rain.93d0b5be.jpeg\";","import {\n    haze,\n    clear_sky,\n    few_clouds,\n    scattered_clouds,\n    shower_rain,\n    defaultBg,\n} from \"../common/imageDir\";\n\nconst bgImgArr = [\n    { name: \"default\", img: defaultBg },\n    { name: \"haze\", img: haze },\n    { name: \"clear sky\", img: clear_sky },\n    { name: \"few clouds\", img: few_clouds },\n    { name: \"scattered clouds\", img: scattered_clouds },\n    { name: \"rain\", img: shower_rain },\n];\n\nconst defaultLocObj = {\n    country: \"IN\",\n    lat: \"28.65195\",\n    lng: \"77.23149\",\n    name: \"Delhi\",\n};\n\nconst rememberLocation = (data) => {\n    localStorage.setItem(\"@myBrowserLatLng\", JSON.stringify(data));\n};\n\nconst getRememberLocation = () =>\n    JSON.parse(localStorage.getItem(\"@myBrowserLatLng\"));\n\nexport { bgImgArr, defaultLocObj, rememberLocation, getRememberLocation };\n","export default __webpack_public_path__ + \"static/media/default.bde60152.webp\";","/**\n * Weatherbit\n */\nconst WEATHERBIT_BASE_URL =\n    \"https://weatherbit-v1-mashape.p.rapidapi.com/forecast\";\nconst WEATHERBIT_HEADER = {\n    // \"x-rapidapi-key\": \"a0f7528f3dmshaee14872d6f78d0p1b61d5jsn4fdd39d994f4\",\n    // \"x-rapidapi-key\": \"6cbace0070msh9dc2c763590d08fp100071jsnf9053fb5854e\",\n    \"x-rapidapi-key\": \"b3d849704bmsh39100e464cbac98p181655jsnc96e0538795b\",\n    \"x-rapidapi-host\": \"weatherbit-v1-mashape.p.rapidapi.com\",\n    \"Content-Type\": \"application/json\",\n};\nconst WEATHERBIT_IMAGE_URL = \"https://www.weatherbit.io/static/img/icons/\";\n\n/**\n * Openweather\n */\nconst OPENWEATHER_BASE_URL = \"https://api.openweathermap.org/data/2.5/weather\";\nconst OPENWEATHER_APP_ID = \"35656e7ddbceeeb9d387f84805b80ea5\";\nconst OPENWEATHER_IMAGE_URL = \"https://openweathermap.org/img/wn/\";\n\nexport {\n    WEATHERBIT_BASE_URL,\n    WEATHERBIT_HEADER,\n    WEATHERBIT_IMAGE_URL,\n    OPENWEATHER_BASE_URL,\n    OPENWEATHER_APP_ID,\n    OPENWEATHER_IMAGE_URL,\n};\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Image from \"react-bootstrap/Image\";\nimport Card from \"react-bootstrap/Card\";\nimport moment from \"moment\";\nimport { OPENWEATHER_IMAGE_URL } from \"../utils/constants\";\n\nconst DashboardMainCard = ({ currentWeatherData }) => (\n    <div className=\"weather-card one\">\n        <div className=\"top\">\n            <div\n                className=\"wrapper\"\n                style={{\n                    backgroundColor: \"transparent\",\n                }}\n            >\n                <div className=\"row\">\n                    <Col xs={6} md={4}>\n                        <Image\n                            src={`${OPENWEATHER_IMAGE_URL}${currentWeatherData?.weather[0]?.icon}@2x.png`}\n                            fluid\n                            height=\"100px\"\n                            width=\"100px\"\n                            alt=\"\"\n                        />\n                        <span\n                            style={{\n                                color: \"#fff\",\n                                fontSize: \"50px\",\n                                fontWeight: \"bold\",\n                                marginTop: 20,\n                            }}\n                        >\n                            {parseInt(currentWeatherData?.main.temp, 10)}\n                            °C\n                        </span>\n                    </Col>\n                    <Col xs={6} md={4} className=\"text-center\">\n                        <h1 className=\"heading text-capitalize\">\n                            {currentWeatherData?.weather[0]?.description}\n                        </h1>\n\n                        <h3 className=\"location\">\n                            {currentWeatherData?.name},{\" \"}\n                            {currentWeatherData?.sys.country}\n                        </h3>\n                        <h6 className=\"location\">\n                            Last updated at:{\" \"}\n                            {moment\n                                .unix(currentWeatherData?.dt)\n                                .format(\"Do MMMM, YYYY hh:mm\")}\n                        </h6>\n                    </Col>\n                </div>\n            </div>\n        </div>\n\n        <Card className=\"p-3\">\n            <Row xs={1} md={3} className=\"g-4\">\n                <Card.Title>\n                    Sunrise -{\" \"}\n                    {moment\n                        .unix(currentWeatherData?.sys.sunrise)\n                        .format(\"hh:mm a\")}\n                </Card.Title>\n                <Card.Title>\n                    Sunset -{\" \"}\n                    {moment\n                        .unix(currentWeatherData?.sys.sunset)\n                        .format(\"hh:mm a\")}\n                </Card.Title>\n            </Row>\n            <Row xs={1} md={3} className=\"g-4\">\n                <Card.Title>\n                    Precipitation - {currentWeatherData?.precip || 0}\n                </Card.Title>\n                <Card.Title>\n                    Wind Speed - {currentWeatherData?.wind.speed.toFixed(2)} m/s\n                </Card.Title>\n                <Card.Title>\n                    Cloud Coverage - {currentWeatherData?.clouds?.all}%\n                </Card.Title>\n            </Row>\n        </Card>\n    </div>\n);\n\nexport default DashboardMainCard;\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { FutureForecastListItem } from \".\";\n\nconst FutureForecast = ({ _onSelectTabFutureForecast, tabDataArr }) => (\n    <Tab.Container\n        id=\"left-tabs-example\"\n        defaultActiveKey=\"first\"\n        onSelect={_onSelectTabFutureForecast}\n    >\n        <Row>\n            <Col sm={3}>\n                <Nav variant=\"pills\" className=\"flex-column \">\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"first\">24 hrs</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"second\">Weekly</Nav.Link>\n                    </Nav.Item>\n                </Nav>\n            </Col>\n            <Col sm={9}>\n                <Tab.Content>\n                    {tabDataArr?.length > 0 &&\n                        tabDataArr?.map((ele, ind) => (\n                            <FutureForecastListItem data={ele} key={ind} />\n                        ))}\n                </Tab.Content>\n            </Col>\n        </Row>\n    </Tab.Container>\n);\n\nexport default FutureForecast;\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Card from \"react-bootstrap/Card\";\nimport moment from \"moment\";\nimport { WEATHERBIT_IMAGE_URL } from \"../utils/constants\";\n\nconst FutureForecastListItem = ({ data }) => (\n    <Card className=\"m-2\">\n        <Card.Header as=\"h5\">\n            {moment.unix(data?.ts).format(\"Do, MMMM hh:mm a\")}{\" \"}\n        </Card.Header>\n\n        <Card.Body>\n            <Row xs={6} md={6} className=\"g-4 text-center\">\n                <img\n                    style={{\n                        height: \"100px\",\n                        width: \"100px\",\n                    }}\n                    alt=\"\"\n                    src={`${WEATHERBIT_IMAGE_URL}${data.weather.icon}.png`}\n                />\n                <span\n                    style={{\n                        fontSize: \"50px\",\n                        fontWeight: \"bold\",\n                    }}\n                >\n                    {parseInt(data?.temp, 10)}\n                    °C\n                </span>\n            </Row>\n            <Row xs={1} md={3} className=\"g-4\">\n                <Card.Title\n                    style={{\n                        fontSize: \"20px\",\n                        fontWeight: \"bold\",\n                    }}\n                >\n                    {data?.weather?.description}\n                </Card.Title>\n                <Card.Title>Precipitation - {data.precip}</Card.Title>\n                <Card.Title>\n                    Wind Speed - {data.wind_spd.toFixed(2)} m/s\n                </Card.Title>\n            </Row>\n        </Card.Body>\n    </Card>\n);\n\nexport default FutureForecastListItem;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\n\nconst Header = ({\n    _onChangeKeyword,\n    _handleSearch,\n    _handleCurrentLocSearch,\n    searchedCityArr,\n    fetchCurrentLocData,\n}) => (\n    <>\n        <form\n            className=\"row\"\n            style={{\n                padding: \"20px\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n            }}\n        >\n            <Col className=\"text-center\">\n                <input\n                    className=\"form-control\"\n                    type=\"search\"\n                    placeholder=\"Search a city\"\n                    aria-label=\"Search\"\n                    onChange={_onChangeKeyword}\n                />\n            </Col>\n            <Col className=\"text-center\">\n                <button\n                    className=\"btn btn-outline-dark \"\n                    onClick={_handleSearch}\n                >\n                    Search\n                </button>\n                <button\n                    className=\"btn btn-dark ms-2\"\n                    type=\"submit\"\n                    onClick={_handleCurrentLocSearch}\n                >\n                    Use my current location\n                </button>\n            </Col>\n        </form>\n        {searchedCityArr?.length > 1 && (\n            <div>\n                <p style={{ marginTop: \"20px\" }}>\n                    Select the city you want to see forecast\n                </p>\n                <div className=\"row p-3\">\n                    {searchedCityArr?.map((ele, index) => (\n                        <button\n                            key={index}\n                            type=\"button\"\n                            className=\"btn btn-outline-dark btn-sm m-3\"\n                            style={{ width: \"100px\", backgroundColor: \"#fff\" }}\n                            onClick={() => fetchCurrentLocData(ele)}\n                        >\n                            {ele.name}, {ele.country}\n                        </button>\n                    ))}\n                </div>\n            </div>\n        )}\n    </>\n);\n\nexport default Header;\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { AxiosHelper } from \"../network/service\";\nimport CITY_DATA from \"../utils/cities.json\";\nimport {\n    bgImgArr,\n    defaultLocObj,\n    getRememberLocation,\n    rememberLocation,\n} from \"../utils/Helper\";\nimport { DashboardMainCard, Header, FutureForecast } from \"../components\";\nimport {\n    OPENWEATHER_APP_ID,\n    OPENWEATHER_BASE_URL,\n    WEATHERBIT_BASE_URL,\n    WEATHERBIT_HEADER,\n} from \"../utils/constants\";\n\nconst Dashboard = () => {\n    const citiesWithLatLong = useMemo(() => CITY_DATA, []);\n    const lastSavedLoc = getRememberLocation();\n\n    const [keyword, setKeyword] = useState(\"\");\n    const [searchedCityArr, setSearchedCityArr] = useState([\n        lastSavedLoc || defaultLocObj,\n    ]);\n    const [currentWeatherData, setCurrentWeatherData] = useState();\n\n    const [selectedTab, setSelectedTab] = useState(0);\n    const [bgImage, setBgImage] = useState(bgImgArr[0].img);\n    const [hourForecastArr, setHourForecastArr] = useState([]);\n    const [weekForecastArr, setWeekForecastArr] = useState([]);\n\n    useEffect(() => {\n        fetchCurrentLocData(searchedCityArr[0]);\n        fetHourlyData();\n        fetchWeekData();\n    }, []);\n\n    const fetchCurrentLocData = async (selectedCity) => {\n        console.log(\"fetchCurrentLocData: \", selectedCity);\n        const payload = {\n            lat: selectedCity?.lat,\n            lon: selectedCity?.lng,\n            appid: OPENWEATHER_APP_ID,\n            units: \"metric\",\n        };\n        console.log(\"payload \", payload);\n        const searchParams = new URLSearchParams(payload);\n        const url = `${OPENWEATHER_BASE_URL}?${searchParams.toString()}`;\n        const response = await AxiosHelper(url, \"get\");\n        console.log(\"fetchCurrentLocData: \", response);\n        console.log(\"selectedCity: \", selectedCity);\n        setCurrentWeatherData(response?.data);\n        const filterBgImgArr = bgImgArr.filter(\n            (str) =>\n                str.name\n                    .toLowerCase()\n                    .indexOf(\n                        String(\n                            response.data?.weather[0]?.description\n                        ).toLowerCase()\n                    ) >= 0\n        );\n        console.log(\"filterBgImgArr: \", filterBgImgArr);\n        if (filterBgImgArr.length === 1) {\n            setBgImage(filterBgImgArr[0]?.img);\n        }\n    };\n\n    const fetHourlyData = async () => {\n        const payload = {\n            lat: searchedCityArr[0]?.lat,\n            lon: searchedCityArr[0]?.lng,\n            hours: \"24\",\n        };\n        const searchParams = new URLSearchParams(payload);\n        const url = `${WEATHERBIT_BASE_URL}/hourly?${searchParams.toString()}`;\n        const response = await AxiosHelper(url, \"get\", WEATHERBIT_HEADER);\n        setHourForecastArr(response?.data?.data);\n    };\n\n    const fetchWeekData = async () => {\n        const payload = {\n            lat: searchedCityArr[0]?.lat,\n            lon: searchedCityArr[0]?.lng,\n            // hours: \"24\",\n        };\n        const searchParams = new URLSearchParams(payload);\n        const url = `${WEATHERBIT_BASE_URL}/3hourly?${searchParams.toString()}`;\n        const response = await AxiosHelper(url, \"get\", WEATHERBIT_HEADER);\n        setWeekForecastArr(response?.data?.data);\n    };\n\n    const _handleSearch = (e) => {\n        e.preventDefault();\n        setSearchedCityArr([]);\n        if (keyword === \"\") return;\n        const filteredCities = citiesWithLatLong.filter(\n            (e) =>\n                String(e.name).toLowerCase() === String(keyword).toLowerCase()\n        );\n        console.log(\"filteredCities: \", filteredCities);\n        if (filteredCities.length === 1) {\n            fetchCurrentLocData(filteredCities[0]);\n            return;\n        }\n        setSearchedCityArr(filteredCities);\n    };\n\n    const _handleCurrentLocSearch = (e) => {\n        e.preventDefault();\n        navigator.geolocation.getCurrentPosition((position) => {\n            console.log(\"Latitude is :\", position.coords.latitude);\n            console.log(\"Longitude is :\", position.coords.longitude);\n            let city = { lat: \"0\", lng: \"0\" };\n            city.lat = position.coords.latitude;\n            city.lng = position.coords.longitude;\n            setSearchedCityArr([city]);\n            // fetchCurrentLocData(city);\n\n            rememberLocation(city);\n        });\n    };\n\n    const _onSelectTabFutureForecast = (e) =>\n        setSelectedTab(e === \"first\" ? 0 : 1);\n\n    const _onChangeKeyword = (e) => setKeyword(e.target.value);\n\n    return (\n        <div\n            className=\"App\"\n            style={{\n                background: `url(\n                    ${bgImage}\n                ) no-repeat`,\n            }}\n        >\n            <Container>\n                <Header\n                    _onChangeKeyword={_onChangeKeyword}\n                    _handleSearch={_handleSearch}\n                    _handleCurrentLocSearch={_handleCurrentLocSearch}\n                    searchedCityArr={searchedCityArr}\n                    fetchCurrentLocData={fetchCurrentLocData}\n                />\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <DashboardMainCard\n                                currentWeatherData={currentWeatherData}\n                            />\n                        </div>\n                        <FutureForecast\n                            _onSelectTabFutureForecast={\n                                _onSelectTabFutureForecast\n                            }\n                            tabDataArr={\n                                selectedTab === 0\n                                    ? hourForecastArr\n                                    : weekForecastArr\n                            }\n                        />\n                    </div>\n                </div>\n            </Container>\n        </div>\n    );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./Extra.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Dashboard from \"./screens/Dashboard\";\n\nconst App = () => <Dashboard />;\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}